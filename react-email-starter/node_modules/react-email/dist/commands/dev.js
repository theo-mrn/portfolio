"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dev = void 0;
const check_directory_exist_1 = require("../utils/check-directory-exist");
const components_1 = require("../_preview/components");
const create_directory_1 = require("../utils/create-directory");
const pages_1 = require("../_preview/pages");
const contants_1 = require("../utils/contants");
const root_1 = require("../_preview/root");
const styles_1 = require("../_preview/styles");
const utils_1 = require("../_preview/utils");
const fs_1 = __importDefault(require("fs"));
const log_symbols_1 = __importDefault(require("log-symbols"));
const ora_1 = __importDefault(require("ora"));
const path_1 = __importDefault(require("path"));
const read_pkg_1 = __importDefault(require("read-pkg"));
const shelljs_1 = __importDefault(require("shelljs"));
const watcher_1 = require("../utils/watcher");
const cpy_1 = __importDefault(require("cpy"));
const dev = async () => {
    await prepareFiles();
    await checkForUpdates();
    await generateEmailsPreview();
    await syncPkg();
    await installDependencies();
    shelljs_1.default.exec('yarn dev', { async: true });
    (0, watcher_1.watcher)();
};
exports.dev = dev;
const prepareFiles = async () => {
    const spinner = (0, ora_1.default)('Preparing React email files...').start();
    const isFirstTime = !(0, check_directory_exist_1.checkDirectoryExist)(contants_1.REACT_EMAIL_ROOT);
    if (isFirstTime) {
        await (0, create_directory_1.createDirectory)(contants_1.REACT_EMAIL_ROOT);
        await (0, create_directory_1.createDirectory)(path_1.default.join(contants_1.REACT_EMAIL_ROOT, 'src'));
        await Promise.all([
            createFilesAndDirectories(components_1.components, 'components'),
            createFilesAndDirectories(utils_1.utils, 'utils'),
            createFilesAndDirectories(styles_1.styles, 'styles'),
            createFilesAndDirectories(root_1.root),
            createFilesAndDirectories(pages_1.pages, 'pages'),
        ]);
    }
    spinner.stopAndPersist({
        symbol: log_symbols_1.default.success,
        text: 'React Email files ready',
    });
};
const checkForUpdates = async () => {
    const spinner = (0, ora_1.default)('Checking for updates...').start();
    const reactEmailPkg = await fs_1.default.promises.readFile(path_1.default.join(contants_1.REACT_EMAIL_ROOT, 'package.json'), { encoding: 'utf8' });
    const isUpToDate = JSON.parse(reactEmailPkg).version === getPreviewPkg().version;
    if (isUpToDate) {
        return spinner.stopAndPersist({
            symbol: log_symbols_1.default.success,
            text: 'React email is up-to-date',
        });
    }
    return updatePackage();
};
const updatePackage = async () => {
    const spinner = (0, ora_1.default)('Updating React email...').start();
    await Promise.all([
        createFilesAndDirectories(components_1.components, 'components'),
        createFilesAndDirectories(utils_1.utils, 'utils'),
        createFilesAndDirectories(styles_1.styles, 'styles'),
        createFilesAndDirectories(root_1.root),
        createFilesAndDirectories(pages_1.pages, 'pages'),
    ]);
    spinner.stopAndPersist({
        symbol: log_symbols_1.default.success,
        text: 'React email is updated',
    });
};
const generateEmailsPreview = async () => {
    const spinner = (0, ora_1.default)('Generating emails preview').start();
    const hasEmailsDirectory = fs_1.default.existsSync(contants_1.CLIENT_EMAILS_PATH);
    if (hasEmailsDirectory) {
        await (0, cpy_1.default)(contants_1.CLIENT_EMAILS_PATH, contants_1.PACKAGE_EMAILS_PATH);
        return spinner.stopAndPersist({
            symbol: log_symbols_1.default.success,
            text: 'Emails preview generated',
        });
    }
    fs_1.default.promises.mkdir(contants_1.CLIENT_EMAILS_PATH);
    return spinner.stopAndPersist({
        symbol: log_symbols_1.default.warning,
        text: 'Emails preview directory is empty',
    });
};
const installDependencies = async () => {
    const spinner = (0, ora_1.default)('Installing dependencies...').start();
    shelljs_1.default.cd(path_1.default.join(contants_1.REACT_EMAIL_ROOT));
    shelljs_1.default.exec('yarn', { silent: true });
    spinner.stopAndPersist({
        symbol: log_symbols_1.default.success,
        text: 'Dependencies installed',
    });
};
const createFilesAndDirectories = async (arr, dir) => {
    if (dir) {
        await (0, create_directory_1.createDirectory)(path_1.default.join(contants_1.REACT_EMAIL_ROOT, 'src', dir));
    }
    const list = arr.map(async ({ content, title, dir: dirName }) => {
        if (dirName && dir) {
            await (0, create_directory_1.createDirectory)(path_1.default.join(contants_1.REACT_EMAIL_ROOT, 'src', dir, dirName));
        }
        const pathDir = dir
            ? dirName
                ? path_1.default.join(contants_1.REACT_EMAIL_ROOT, 'src', dir, dirName, title)
                : path_1.default.join(contants_1.REACT_EMAIL_ROOT, 'src', dir, title)
            : path_1.default.join(contants_1.REACT_EMAIL_ROOT, title);
        await fs_1.default.promises.writeFile(pathDir, content);
    });
    await Promise.all(list);
};
const syncPkg = async () => {
    const previewPkg = getPreviewPkg();
    const clientPkg = await (0, read_pkg_1.default)();
    const pkg = {
        ...previewPkg,
        dependencies: {
            ...previewPkg.dependencies,
            ...clientPkg.dependencies,
        },
    };
    await fs_1.default.promises.writeFile(path_1.default.join(contants_1.REACT_EMAIL_ROOT, 'package.json'), JSON.stringify(pkg));
};
const getPreviewPkg = () => {
    const [previewPkg] = root_1.root.filter((pkg) => pkg.title === 'package.json');
    return JSON.parse(previewPkg?.content || '');
};
